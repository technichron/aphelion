
BASE INSTRUCTION SET                opcode-hex opcode-binary argument-type

    nop - no instruction
        nop                         0x00 0b000000 NA

    mov (src), (dest)           copy data from (src) to (dest)
        mov reg, $imm16             0x01 0b000001 RD
        mov reg, reg                0x02 0b000010 RR
        mov dreg, dreg              0x03 0b000011 RR
        mov imm8, reg               0x04 0b000100 RB
        mov imm8, $imm16            0x05 0b000101 BD
        mov imm16, dreg             0x06 0b000110 RD
        mov $imm16, reg             0x07 0b000111 RD
        mov $imm16, $imm16          0x08 0b001000 DD
        mov $dreg, $imm16           0x3C 0b001000 RD
        mov $dreg, dreg             0x3D 0b001000 RR

    add (op1), (op2)            (op1) = (op1) + (op2)
        add reg, reg                0x09 0b001001 RR
        add reg, imm8               0x0A 0b001010 RB
        add dreg, dreg              0x0B 0b001011 RR
        add dreg, imm16             0x0C 0b001100 RD

    adc (op1), (op2)            (op1) = (op1) + (op2) + CARRY
        adc reg, reg                0x0D 0b001101 RR
        adc reg, imm8               0x0E 0b001110 RB
        adc dreg, dreg              0x0F 0b001111 RR
        adc dreg, imm16             0x10 0b010000 RD

    sub (op1), (op2)            (op1) = (op1) - (op2)
        sub reg, reg                0x11 0b010001 RR
        sub reg, imm8               0x12 0b010010 RB
        sub dreg, dreg              0x13 0b010011 RR
        sub dreg, imm16             0x14 0b010100 RD

    sbb (op1), (op2)            (op1) = (op1) - (op2) - BORROW
        sbb reg, reg                0x15 0b010101 RR
        sbb reg, imm8               0x16 0b010110 RB
        sbb dreg, dreg              0x17 0b010111 RR
        sbb dreg, imm16             0x18 0b011000 RD

    jif (flags), (loc)          set program counter to (loc) if F & (flags) == (flags)
        jif imm8, label/$imm16      0x1B 0b011011 BD
        jif imm8, $dreg             0x19 0b011001 RB

    cif (flags), (loc)          set program counter to (loc) and set R to address of the following instruction if F & (flags) == (flags)
        cif imm8, label/$imm16      0x1C 0b011100 BD
        cif imm8, $dreg             0x1A 0b011010 RB

    ret                         set program counter to R
        ret                         0x1D 0b011101 NA

    push (value)                push (value) onto stack         * stack pointer decrements, most significant byte of int16 pushed first
        push reg                    0x1E 0b011110 RE
        push dreg                   0x1F 0b011111 RE
        push imm8                   0x20 0b100000 BY
        push imm16                  0x21 0b100001 DO

    pop (dest)                  pop value from stack to (dest)  * stack pointer increments
        pop reg                     0x22 0b100010 RE
        pop dreg                    0x23 0b100011 RE

    and (op1), (op2)            (op1) = (op1) & (op2)
        and reg, reg                0x24 0b100100 RR
        and reg, imm8               0x25 0b100101 RB
        and dreg, dreg              0x26 0b100110 RR
        and dreg, imm16             0x27 0b100111 RD

    or (op1), (op2)             (op1) = (op1) | (op2)
        or reg, reg                 0x28 0b101000 RR
        or reg, imm8                0x29 0b101001 RB
        or dreg, dreg               0x2A 0b101010 RR
        or dreg, imm16              0x2B 0b101011 RD

    not (op)                    (op) = ! (op)
        not reg                     0x2C 0b101100 RE
        not dreg                    0x2D 0b101101 RE

    cmp (op1), (op2)            compare (op1) and (op2), set relevant flags
        cmp reg, reg                0x2E 0b101110 RR
        cmp reg, imm8               0x2F 0b101111 RB
        cmp dreg, dreg              0x30 0b110000 RR
        cmp dreg, imm16             0x31 0b110001 RD
    
    scmp (op1), (op2)           compare (op1) and (op2) as two's complement signed integers, set relevant flags
        scmp reg, reg               0x32 0b110010 RR
        scmp reg, imm8              0x33 0b110011 RB
        scmp dreg, dreg             0x34 0b110100 RR
        scmp dreg, imm16            0x35 0b110101 RD
    
    shl (op), (amount)          logical/arithmetic bit shift (op) left (amount) bits     * can also be called with 'asl' and 'lsl'
        shl reg, imm8               0x36 0b110110 RB
        shl dreg, imm8              0x37 0b110111 RB

    asr (op), (amount)          arithmetic bit shift (op) right (amount) bits
        asr reg, imm8               0x38 0b111000 RB
        asr dreg, imm8              0x39 0b111001 RB

    lsr (op), (amount)          logical bit shift (op) right (amount) bits
        lsr reg, imm8               0x3A 0b111010 RB
        lsr dreg, imm8              0x3B 0b111011 RB

    hcf                         halt and catch fire
        hcf                         0x3F 0b111111 NA

SEGMENTATION
    
    @segment text
        defines a segment of assembly code. refer to the above for assembly syntax
    
    @segment data
        defines a segment of data in RAM space.

    @segment rodata
        defines a segment of data in ROM space.


    supported data types:   * little endian
        int8        8 bit unsigned integer
        sint8       8 bit signed integer
        int16       16 bit unsigned integer
        sint16      16 bit signed integer
        int32       32 bit unsigned integer
        sint32      32 bit signed integer
        char        8 bit ascii character
        string      sequence of chars
        file        file
    
    these types only serve to tell the assembler how to allocate memory and embed the data into the image binary. 
    It is not (as of yet) used to track how the data is used in the program.