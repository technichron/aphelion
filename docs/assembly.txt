
INSTRUCTIONS

    nop - no instruction
        nop                         0x00

    mov (src), (dest)           copy data from (src) to (dest)
        mov reg, $imm16             0x01
        mov reg, reg                0x02
        mov dreg, dreg              0x03
        mov imm8, reg               0x04
        mov imm8, $imm16            0x05
        mov imm16, dreg             0x06
        mov $imm16, reg             0x07
        mov $imm16, $imm16          0x08

    add (op1), (op2)            (op1) = (op1) + (op2)
        add reg, reg                0x09
        add reg, imm8               0x0A
        add dreg, dreg              0x0B
        add dreg, imm16             0x0C

    adc (op1), (op2)            (op1) = (op1) + (op2) + CARRY
        adc reg, reg                0x0D
        adc reg, imm8               0x0E
        adc dreg, dreg              0x0F
        adc dreg, imm16             0x10

    sub (op1), (op2)            (op1) = (op1) - (op2)
        sub reg, reg                0x11
        sub reg, imm8               0x12
        sub dreg, dreg              0x13
        sub dreg, imm16             0x14

    sbb (op1), (op2)            (op1) = (op1) - (op2) - BORROW
        sbb reg, reg                0x15
        sbb reg, imm8               0x16
        sbb dreg, dreg              0x17
        sbb dreg, imm16             0x18

    jmp (loc)                   set program counter to (loc)
        jmp label/$imm16            0x19

    jsr (loc)                   set program counter to (loc) and set R to address of the following instruction
        jsr label/$imm16            0x1A

    jfl (flags), (loc)          set program counter to (loc) if every flag in (flags) is set
        jfl imm8, label/$imm16      0x1B

    jsf(flags), (loc)           set program counter to (loc) and set R to address of the following instruction if every flag in (flags) is set
        jsf imm8, label/$imm16      0x1C

    ret                         set program counter to R
        ret                         0x1D

    push (value)                push (value) onto stack
        push reg                    0x1E
        push dreg                   0x1F
        push imm8                   0x20
        push imm16                  0x21

    pop (dest)                  pop value from stack to (dest)
        pop reg                     0x22
        pop dreg                    0x23

    and (op1), (op2)            (op1) = (op1) & (op2)
        and reg, reg                0x24
        and reg, imm8               0x25
        and dreg, dreg              0x26
        and dreg, imm16             0x27

    or (op1), (op2)             (op1) = (op1) | (op2)
        or reg, reg                 0x28
        or reg, imm8                0x29
        or dreg, dreg               0x2A
        or dreg, imm16              0x2B

    not (op)                    (op) = ! (op)
        not reg                     0x2C
        not dreg                    0x2D

    cmp (op1), (op2)            compare (op1) and (op2), set relevant flags
        cmp reg, reg                0x2E
        cmp reg, imm8               0x2F
        cmp dreg, dreg              0x30
        cmp dreg, imm16             0x31

    hcf                         halt and catch fire
        hcf                         0xFF